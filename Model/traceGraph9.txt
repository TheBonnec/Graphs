
   GRAPH 9 


      0    1    2    3    4    5    6    7    8    9    10    11
--  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ----  ----
 0    0    0    0    0    0    0    0    0    0    0     0     0
 1    0    0    0    0    0    0    0    0    0    1     0     0
 2    0    0    0    0    0    0    0    0    0    2     0     0
 3    0    0    0    0    0    0    0    0    0    3     0     0
 4    0    4    0    0    0    4    0    0    0    0     0     0
 5    0    5    0    0    0    0    0    0    5    0     0     0
 6    0    0    0    6    0    0    0    0    0    0     0     0
 7    0    0    7    0    0    0    0    0    7    0     0     0
 8    0    8    0    0    0    0    0    0    0    8     0     0
 9    0    0    0    0    0    0    0    0    0    0     0     9
10    0   10    0   10    0    0    0    0    0    0     0     0
11    0    0    0    0    0    0    0    0    0    0     0     0

Detecting the cycle, by using the elimination by predecessors method.
Source vertices: ['0']
Eliminating source vertices...
Remaining vertices: 1 2 3 4 5 6 7 8 9 10 11 
Source vertices: ['4', '6', '7', '10']
Eliminating source vertices...
Remaining vertices: 1 2 3 5 8 9 11 
Source vertices: ['2', '3', '5']
Eliminating source vertices...
Remaining vertices: 1 8 9 11 
Source vertices: ['8']
Eliminating source vertices...
Remaining vertices: 1 9 11 
Source vertices: ['1']
Eliminating source vertices...
Remaining vertices: 9 11 
Source vertices: ['9']
Eliminating source vertices...
Remaining vertices: 11 
Source vertices: ['11']
Eliminating source vertices...
Remaining vertices: None
No cycle detected.
No negative-weight edge detected.

 ==> This graph can be a scheduling graph.


Computing the ranks of the vertices in the graph.
-- Iteration 0 --
Rank of 0 : 0
-- Iteration 1 --
Rank of 4 : 1
Rank of 6 : 1
Rank of 7 : 1
Rank of 10 : 1
-- Iteration 2 --
Rank of 2 : 2
Rank of 3 : 2
Rank of 5 : 2
-- Iteration 3 --
Rank of 8 : 3
-- Iteration 4 --
Rank of 1 : 4
-- Iteration 5 --
Rank of 9 : 5
-- Iteration 6 --
Rank of 11 : 6

Calculating the earliest dates of the vertices in the graph.
We are going to keep the maximum value for each vertex among the earliest dates of predecessors.
The maximum value for vertex 4 among : 0 
--> Earliest date of 4 : 0
The maximum value for vertex 6 among : 0 
--> Earliest date of 6 : 0
The maximum value for vertex 7 among : 0 
--> Earliest date of 7 : 0
The maximum value for vertex 10 among : 0 
--> Earliest date of 10 : 0
The maximum value for vertex 2 among : 7 
--> Earliest date of 2 : 7
The maximum value for vertex 3 among : 6 10 
--> Earliest date of 3 : 10
The maximum value for vertex 5 among : 4 
--> Earliest date of 5 : 4
The maximum value for vertex 8 among : 9 7 
--> Earliest date of 8 : 9
The maximum value for vertex 1 among : 4 9 17 10 
--> Earliest date of 1 : 17
The maximum value for vertex 9 among : 18 9 13 17 
--> Earliest date of 9 : 18
The maximum value for vertex 11 among : 27 
--> Earliest date of 11 : 27

Calculating the latest dates of the vertices in the graph.
We are going to keep the minimum value of predecessors latest dates of each vertex among the latest dates calculated.
--> Latest date of 11 : 27
--> Latest date of 9 : 18
--> Latest date of 1 : 17
--> Latest date of 8 : 9
--> Latest date of 2 : 16
--> Latest date of 3 : 15
--> Latest date of 5 : 4
--> Latest date of 4 : 0
--> Latest date of 6 : 9
--> Latest date of 7 : 2
--> Latest date of 10 : 5

Calculating the floats of the vertices in the graph.
Float of 0 : 0 - 0 = 0
Float of 1 : 17 - 17 = 0
Float of 2 : 16 - 7 = 9
Float of 3 : 15 - 10 = 5
Float of 4 : 0 - 0 = 0
Float of 5 : 4 - 4 = 0
Float of 6 : 9 - 0 = 9
Float of 7 : 2 - 0 = 2
Float of 8 : 9 - 9 = 0
Float of 9 : 18 - 18 = 0
Float of 10 : 5 - 0 = 5
Float of 11 : 27 - 27 = 0

 ==> The critical path of this graph is : 0 --> 1 --> 4 --> 5 --> 8 --> 9 --> 11
